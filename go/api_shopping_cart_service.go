// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Shopping Cart -  Customization
 *
 *  The Shopping Cart API provides a standardized mechanism for the management of shopping carts. Including creation, update, retrieval, deletion and notification of event.  Shopping Cart entity is used for the temporarily selection and reservation of product offerings in e-commerce and retail purchase.  Shopping cart supports purchase of both tangible and intangible goods and service (e.g. handset, telecom network service). The charge includes the one-off fee such as the fee for handset and the recurring fee such as the fee of a network service.  Shopping Cart contains list of cart items, a reference to party or party role (e.g. customer) or contact medium in case of unknown customer, In addition the calculated total items price including promotions.   Copyright  TM Forum 2019. All Rights Reserved   
 *
 * API version: 4.0.0
 */

package service

import (
	"fmt"
	"context"
	"net/http"
	"errors"
	 "strconv"
	models "tmf663/models"
	db  "tmf663/dao/query"
)

// ShoppingCartAPIService is a service that implements the logic for the ShoppingCartAPIServicer
// This service should implement the business logic for every endpoint for the ShoppingCartAPI API.
// Include any external packages or services that will be required by this service.
type ShoppingCartAPIService struct {
}

// NewShoppingCartAPIService creates a default api service
func NewShoppingCartAPIService() *ShoppingCartAPIService {
	return &ShoppingCartAPIService{}
}

// CreateShoppingCart - Creates a ShoppingCart
func (s *ShoppingCartAPIService) CreateShoppingCart(ctx context.Context, shoppingCart models.ShoppingCartCreate) (models.ImplResponse, error) {
	// TODO - update CreateShoppingCart with the required logic for this service method.
	// Add api_shopping_cart_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(201, ShoppingCart{}) or use other options such as http.Ok ...
	// return Response(201, ShoppingCart{}), nil

	// TODO: Uncomment the next line to return response Response(400, Error{}) or use other options such as http.Ok ...
	// return Response(400, Error{}), nil

	// TODO: Uncomment the next line to return response Response(401, Error{}) or use other options such as http.Ok ...
	// return Response(401, Error{}), nil

	// TODO: Uncomment the next line to return response Response(403, Error{}) or use other options such as http.Ok ...
	// return Response(403, Error{}), nil

	// TODO: Uncomment the next line to return response Response(405, Error{}) or use other options such as http.Ok ...
	// return Response(405, Error{}), nil

	// TODO: Uncomment the next line to return response Response(409, Error{}) or use other options such as http.Ok ...
	// return Response(409, Error{}), nil

	// TODO: Uncomment the next line to return response Response(500, Error{}) or use other options such as http.Ok ...
	// return Response(500, Error{}), nil

	fmt.Println("Creating Shopping Cart : ")

	err := db.CreateShoppingCart(shoppingCart)
	if (err != nil) {
		return models.Response(http.StatusInternalServerError, nil), errors.New("call to CreateShoppingCart failed")
	}
	
	//return models.Response(http.StatusNotImplemented, nil), errors.New("CreateShoppingCart method not implemented")
	return models.Response(http.StatusCreated, nil), nil
}

// DeleteShoppingCart - Deletes a ShoppingCart
func (s *ShoppingCartAPIService) DeleteShoppingCart(ctx context.Context, id string) (models.ImplResponse, error) {
	// TODO - update DeleteShoppingCart with the required logic for this service method.
	// Add api_shopping_cart_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(204, {}) or use other options such as http.Ok ...
	// return Response(204, nil),nil

	// TODO: Uncomment the next line to return response Response(400, Error{}) or use other options such as http.Ok ...
	// return Response(400, Error{}), nil

	// TODO: Uncomment the next line to return response Response(401, Error{}) or use other options such as http.Ok ...
	// return Response(401, Error{}), nil

	// TODO: Uncomment the next line to return response Response(403, Error{}) or use other options such as http.Ok ...
	// return Response(403, Error{}), nil

	// TODO: Uncomment the next line to return response Response(404, Error{}) or use other options such as http.Ok ...
	// return Response(404, Error{}), nil

	// TODO: Uncomment the next line to return response Response(405, Error{}) or use other options such as http.Ok ...
	// return Response(405, Error{}), nil

	// TODO: Uncomment the next line to return response Response(409, Error{}) or use other options such as http.Ok ...
	// return Response(409, Error{}), nil

	// TODO: Uncomment the next line to return response Response(500, Error{}) or use other options such as http.Ok ...
	// return Response(500, Error{}), nil

	fmt.Println("Delete Shopping Cart with ID : ", id)

	result, err := db.DeleteShoppingCartById(id)
	
	if err != nil {
		return models.Response(http.StatusBadRequest, nil), errors.New("DeleteShoppingCart method not implemented")
	}
	
	if !result {
		return models.Response(http.StatusBadRequest, nil), errors.New("DeleteShoppingCart method not implemented")
	}

	return models.Response(http.StatusNoContent, result), nil

}

// ListShoppingCart - List or find ShoppingCart objects
func (s *ShoppingCartAPIService) ListShoppingCart(ctx context.Context, fields string, offset int32, limit int32) (models.ImplResponse, error) {
	// TODO - update ListShoppingCart with the required logic for this service method.
	// Add api_shopping_cart_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(200, []ShoppingCart{}) or use other options such as http.Ok ...
	// return Response(200, []ShoppingCart{}), nil

	// TODO: Uncomment the next line to return response Response(400, Error{}) or use other options such as http.Ok ...
	// return Response(400, Error{}), nil

	// TODO: Uncomment the next line to return response Response(401, Error{}) or use other options such as http.Ok ...
	// return Response(401, Error{}), nil

	// TODO: Uncomment the next line to return response Response(403, Error{}) or use other options such as http.Ok ...
	// return Response(403, Error{}), nil

	// TODO: Uncomment the next line to return response Response(404, Error{}) or use other options such as http.Ok ...
	// return Response(404, Error{}), nil

	// TODO: Uncomment the next line to return response Response(405, Error{}) or use other options such as http.Ok ...
	// return Response(405, Error{}), nil

	// TODO: Uncomment the next line to return response Response(409, Error{}) or use other options such as http.Ok ...
	// return Response(409, Error{}), nil

	// TODO: Uncomment the next line to return response Response(500, Error{}) or use other options such as http.Ok ...
	// return Response(500, Error{}), nil

	fmt.Println("Get Shopping Cart List ")

	result,err := db.GetShoppingCartList()

	if err!= nil {
		return models.Response(http.StatusBadRequest, nil), errors.New("ListShoppingCart method not implemented")
	}

	return models.Response(http.StatusOK, result), nil

}

// PatchShoppingCart - Updates partially a ShoppingCart
func (s *ShoppingCartAPIService) PatchShoppingCart(ctx context.Context, id string, shoppingCart models.ShoppingCartUpdate) (models.ImplResponse, error) {
	// TODO - update PatchShoppingCart with the required logic for this service method.
	// Add api_shopping_cart_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(200, ShoppingCart{}) or use other options such as http.Ok ...
	// return Response(200, ShoppingCart{}), nil

	// TODO: Uncomment the next line to return response Response(400, Error{}) or use other options such as http.Ok ...
	// return Response(400, Error{}), nil

	// TODO: Uncomment the next line to return response Response(401, Error{}) or use other options such as http.Ok ...
	// return Response(401, Error{}), nil

	// TODO: Uncomment the next line to return response Response(403, Error{}) or use other options such as http.Ok ...
	// return Response(403, Error{}), nil

	// TODO: Uncomment the next line to return response Response(404, Error{}) or use other options such as http.Ok ...
	// return Response(404, Error{}), nil

	// TODO: Uncomment the next line to return response Response(405, Error{}) or use other options such as http.Ok ...
	// return Response(405, Error{}), nil

	// TODO: Uncomment the next line to return response Response(409, Error{}) or use other options such as http.Ok ...
	// return Response(409, Error{}), nil

	// TODO: Uncomment the next line to return response Response(500, Error{}) or use other options such as http.Ok ...
	// return Response(500, Error{}), nil

	return models.Response(http.StatusNotImplemented, nil), errors.New("PatchShoppingCart method not implemented")
}

// RetrieveShoppingCart - Retrieves a ShoppingCart by ID
func (s *ShoppingCartAPIService) RetrieveShoppingCart(ctx context.Context, id string, fields string) (models.ImplResponse, error) {
	// TODO - update RetrieveShoppingCart with the required logic for this service method.
	// Add api_shopping_cart_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(200, ShoppingCart{}) or use other options such as http.Ok ...
	// return Response(200, ShoppingCart{}), nil

	// TODO: Uncomment the next line to return response Response(400, Error{}) or use other options such as http.Ok ...
	// return Response(400, Error{}), nil

	// TODO: Uncomment the next line to return response Response(401, Error{}) or use other options such as http.Ok ...
	// return Response(401, Error{}), nil

	// TODO: Uncomment the next line to return response Response(403, Error{}) or use other options such as http.Ok ...
	// return Response(403, Error{}), nil

	// TODO: Uncomment the next line to return response Response(404, Error{}) or use other options such as http.Ok ...
	// return Response(404, Error{}), nil

	// TODO: Uncomment the next line to return response Response(405, Error{}) or use other options such as http.Ok ...
	// return Response(405, Error{}), nil

	// TODO: Uncomment the next line to return response Response(409, Error{}) or use other options such as http.Ok ...
	// return Response(409, Error{}), nil

	// TODO: Uncomment the next line to return response Response(500, Error{}) or use other options such as http.Ok ...
	// return Response(500, Error{}), nil

	fmt.Println("Get Shopping Cart with ID : ", id)
	result := db.GetShoppingCartById(id)

	if result.Id == "0" {
		return models.Response(http.StatusBadRequest, nil), errors.New("RetrieveShoppingCart has failed")
	}
	/*
	i, err := strconv.Atoi(id)
   if err != nil {
		errors.New("RetrieveShoppingCart has failed")
    }
	result,err := db.RetrieveShoppingCart(int32(i))
	if (err != nil) {
		return models.Response(http.StatusBadRequest, nil), errors.New("RetrieveShoppingCart has failed")
	}
	*/
	
	return models.Response(http.StatusOK, result), nil
}
