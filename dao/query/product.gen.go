// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
	model "tmf663/dao/model"
)

func newPRODUCT(db *gorm.DB, opts ...gen.DOOption) pRODUCT {
	_pRODUCT := pRODUCT{}

	_pRODUCT.pRODUCTDo.UseDB(db, opts...)
	_pRODUCT.pRODUCTDo.UseModel(&model.PRODUCT{})

	tableName := _pRODUCT.pRODUCTDo.TableName()
	_pRODUCT.ALL = field.NewAsterisk(tableName)
	_pRODUCT.ID = field.NewInt32(tableName, "ID")
	_pRODUCT.PRODUCTORDERID = field.NewInt32(tableName, "PRODUCTORDER_ID")
	_pRODUCT.DESCRIPTION = field.NewString(tableName, "DESCRIPTION")
	_pRODUCT.ISBUNDLE = field.NewBool(tableName, "IS_BUNDLE")
	_pRODUCT.ISCUSTOMERVISIBLE = field.NewBool(tableName, "IS_CUSTOMERVISIBLE")
	_pRODUCT.NAME = field.NewString(tableName, "NAME")
	_pRODUCT.ORDERDATE = field.NewTime(tableName, "ORDERDATE")
	_pRODUCT.PRODUCTSERIALNUMBER = field.NewString(tableName, "PRODUCTSERIALNUMBER")
	_pRODUCT.STARTDATE = field.NewTime(tableName, "STARTDATE")
	_pRODUCT.TERMINATIONDATE = field.NewTime(tableName, "TERMINATIONDATE")
	_pRODUCT.PRODUCTCHARACTERISTIC = field.NewString(tableName, "PRODUCTCHARACTERISTIC")
	_pRODUCT.PRODUCTOFFERING = field.NewString(tableName, "PRODUCTOFFERING")
	_pRODUCT.PRODUCTPRICE = field.NewFloat32(tableName, "PRODUCTPRICE")
	_pRODUCT.PRODUCTTERM = field.NewInt32(tableName, "PRODUCTTERM")
	_pRODUCT.PRODUCTSPECIFICATION = field.NewString(tableName, "PRODUCTSPECIFICATION")
	_pRODUCT.RELATEDPARTY = field.NewString(tableName, "RELATEDPARTY")

	_pRODUCT.fillFieldMap()

	return _pRODUCT
}

type pRODUCT struct {
	pRODUCTDo pRODUCTDo

	ALL                   field.Asterisk
	ID                    field.Int32
	PRODUCTORDERID        field.Int32
	DESCRIPTION           field.String
	ISBUNDLE              field.Bool
	ISCUSTOMERVISIBLE     field.Bool
	NAME                  field.String
	ORDERDATE             field.Time
	PRODUCTSERIALNUMBER   field.String
	STARTDATE             field.Time
	TERMINATIONDATE       field.Time
	PRODUCTCHARACTERISTIC field.String
	PRODUCTOFFERING       field.String
	PRODUCTPRICE          field.Float32
	PRODUCTTERM           field.Int32
	PRODUCTSPECIFICATION  field.String
	RELATEDPARTY          field.String

	fieldMap map[string]field.Expr
}

func (p pRODUCT) Table(newTableName string) *pRODUCT {
	p.pRODUCTDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pRODUCT) As(alias string) *pRODUCT {
	p.pRODUCTDo.DO = *(p.pRODUCTDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pRODUCT) updateTableName(table string) *pRODUCT {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt32(table, "ID")
	p.PRODUCTORDERID = field.NewInt32(table, "PRODUCTORDER_ID")
	p.DESCRIPTION = field.NewString(table, "DESCRIPTION")
	p.ISBUNDLE = field.NewBool(table, "IS_BUNDLE")
	p.ISCUSTOMERVISIBLE = field.NewBool(table, "IS_CUSTOMERVISIBLE")
	p.NAME = field.NewString(table, "NAME")
	p.ORDERDATE = field.NewTime(table, "ORDERDATE")
	p.PRODUCTSERIALNUMBER = field.NewString(table, "PRODUCTSERIALNUMBER")
	p.STARTDATE = field.NewTime(table, "STARTDATE")
	p.TERMINATIONDATE = field.NewTime(table, "TERMINATIONDATE")
	p.PRODUCTCHARACTERISTIC = field.NewString(table, "PRODUCTCHARACTERISTIC")
	p.PRODUCTOFFERING = field.NewString(table, "PRODUCTOFFERING")
	p.PRODUCTPRICE = field.NewFloat32(table, "PRODUCTPRICE")
	p.PRODUCTTERM = field.NewInt32(table, "PRODUCTTERM")
	p.PRODUCTSPECIFICATION = field.NewString(table, "PRODUCTSPECIFICATION")
	p.RELATEDPARTY = field.NewString(table, "RELATEDPARTY")

	p.fillFieldMap()

	return p
}

func (p *pRODUCT) WithContext(ctx context.Context) *pRODUCTDo { return p.pRODUCTDo.WithContext(ctx) }

func (p pRODUCT) TableName() string { return p.pRODUCTDo.TableName() }

func (p pRODUCT) Alias() string { return p.pRODUCTDo.Alias() }

func (p pRODUCT) Columns(cols ...field.Expr) gen.Columns { return p.pRODUCTDo.Columns(cols...) }

func (p *pRODUCT) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pRODUCT) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 16)
	p.fieldMap["ID"] = p.ID
	p.fieldMap["PRODUCTORDER_ID"] = p.PRODUCTORDERID
	p.fieldMap["DESCRIPTION"] = p.DESCRIPTION
	p.fieldMap["IS_BUNDLE"] = p.ISBUNDLE
	p.fieldMap["IS_CUSTOMERVISIBLE"] = p.ISCUSTOMERVISIBLE
	p.fieldMap["NAME"] = p.NAME
	p.fieldMap["ORDERDATE"] = p.ORDERDATE
	p.fieldMap["PRODUCTSERIALNUMBER"] = p.PRODUCTSERIALNUMBER
	p.fieldMap["STARTDATE"] = p.STARTDATE
	p.fieldMap["TERMINATIONDATE"] = p.TERMINATIONDATE
	p.fieldMap["PRODUCTCHARACTERISTIC"] = p.PRODUCTCHARACTERISTIC
	p.fieldMap["PRODUCTOFFERING"] = p.PRODUCTOFFERING
	p.fieldMap["PRODUCTPRICE"] = p.PRODUCTPRICE
	p.fieldMap["PRODUCTTERM"] = p.PRODUCTTERM
	p.fieldMap["PRODUCTSPECIFICATION"] = p.PRODUCTSPECIFICATION
	p.fieldMap["RELATEDPARTY"] = p.RELATEDPARTY
}

func (p pRODUCT) clone(db *gorm.DB) pRODUCT {
	p.pRODUCTDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pRODUCT) replaceDB(db *gorm.DB) pRODUCT {
	p.pRODUCTDo.ReplaceDB(db)
	return p
}

type pRODUCTDo struct{ gen.DO }

func (p pRODUCTDo) Debug() *pRODUCTDo {
	return p.withDO(p.DO.Debug())
}

func (p pRODUCTDo) WithContext(ctx context.Context) *pRODUCTDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pRODUCTDo) ReadDB() *pRODUCTDo {
	return p.Clauses(dbresolver.Read)
}

func (p pRODUCTDo) WriteDB() *pRODUCTDo {
	return p.Clauses(dbresolver.Write)
}

func (p pRODUCTDo) Session(config *gorm.Session) *pRODUCTDo {
	return p.withDO(p.DO.Session(config))
}

func (p pRODUCTDo) Clauses(conds ...clause.Expression) *pRODUCTDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pRODUCTDo) Returning(value interface{}, columns ...string) *pRODUCTDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pRODUCTDo) Not(conds ...gen.Condition) *pRODUCTDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pRODUCTDo) Or(conds ...gen.Condition) *pRODUCTDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pRODUCTDo) Select(conds ...field.Expr) *pRODUCTDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pRODUCTDo) Where(conds ...gen.Condition) *pRODUCTDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pRODUCTDo) Order(conds ...field.Expr) *pRODUCTDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pRODUCTDo) Distinct(cols ...field.Expr) *pRODUCTDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pRODUCTDo) Omit(cols ...field.Expr) *pRODUCTDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pRODUCTDo) Join(table schema.Tabler, on ...field.Expr) *pRODUCTDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pRODUCTDo) LeftJoin(table schema.Tabler, on ...field.Expr) *pRODUCTDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pRODUCTDo) RightJoin(table schema.Tabler, on ...field.Expr) *pRODUCTDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pRODUCTDo) Group(cols ...field.Expr) *pRODUCTDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pRODUCTDo) Having(conds ...gen.Condition) *pRODUCTDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pRODUCTDo) Limit(limit int) *pRODUCTDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pRODUCTDo) Offset(offset int) *pRODUCTDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pRODUCTDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *pRODUCTDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pRODUCTDo) Unscoped() *pRODUCTDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pRODUCTDo) Create(values ...*model.PRODUCT) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pRODUCTDo) CreateInBatches(values []*model.PRODUCT, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pRODUCTDo) Save(values ...*model.PRODUCT) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pRODUCTDo) First() (*model.PRODUCT, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PRODUCT), nil
	}
}

func (p pRODUCTDo) Take() (*model.PRODUCT, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PRODUCT), nil
	}
}

func (p pRODUCTDo) Last() (*model.PRODUCT, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PRODUCT), nil
	}
}

func (p pRODUCTDo) Find() ([]*model.PRODUCT, error) {
	result, err := p.DO.Find()
	return result.([]*model.PRODUCT), err
}

func (p pRODUCTDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PRODUCT, err error) {
	buf := make([]*model.PRODUCT, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pRODUCTDo) FindInBatches(result *[]*model.PRODUCT, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pRODUCTDo) Attrs(attrs ...field.AssignExpr) *pRODUCTDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pRODUCTDo) Assign(attrs ...field.AssignExpr) *pRODUCTDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pRODUCTDo) Joins(fields ...field.RelationField) *pRODUCTDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pRODUCTDo) Preload(fields ...field.RelationField) *pRODUCTDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pRODUCTDo) FirstOrInit() (*model.PRODUCT, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PRODUCT), nil
	}
}

func (p pRODUCTDo) FirstOrCreate() (*model.PRODUCT, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PRODUCT), nil
	}
}

func (p pRODUCTDo) FindByPage(offset int, limit int) (result []*model.PRODUCT, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pRODUCTDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pRODUCTDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pRODUCTDo) Delete(models ...*model.PRODUCT) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pRODUCTDo) withDO(do gen.Dao) *pRODUCTDo {
	p.DO = *do.(*gen.DO)
	return p
}
